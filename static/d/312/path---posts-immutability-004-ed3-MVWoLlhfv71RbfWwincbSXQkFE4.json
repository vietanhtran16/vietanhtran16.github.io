{"data":{"site":{"siteMetadata":{"title":"Blog by Viet Anh Tran","subtitle":"Passionate about building software.","copyright":"Â© All rights reserved.","author":{"name":"Viet Anh Tran","email":"mail@vietanhtran.tech","github":"vietanhtran16","linkedin":"https://www.linkedin.com/in/viet-anh-tran-ba15a3a4/"},"disqusShortname":"vietanhtranblog","url":"https://vietanhtran16.github.io"}},"markdownRemark":{"id":"e9cf1c22-61ba-5c26-8705-75c6984e9c8c","html":"<p>It is about how to handle change and not about avoiding change. </p>\n<h2>But what is mutation?</h2>\n<p>Mutation is simply overwriting the current object. Due to that, object can be mutated anywhere in the application so in one line it can be an object of one type, and in the following line it can be another type. This is what makes objects unpredictable since they are different at different point in time.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//mutating model property of car</span>\n<span class=\"token keyword\">let</span> car <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>make<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Tesla\"</span><span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">:</span> <span class=\"token string\">\"X\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ncar<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> <span class=\"token string\">\"Fiesta\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Why is mutation bad?</h2>\n<ul>\n<li>Unpredictable. Object can be mutated anywhere in the application so in one line it can be an object of one type, and in the following line it can be another type. This is what makes objects unpredictable since they are different at different point in time.</li>\n<li>Only provides current state</li>\n<li>Objects are overwritten so the history of that objects are not kept in memory. </li>\n<li>Hard to track down bugs since objects are mutated everywhere and only the current state is presented</li>\n</ul>\n<h2>What is immutability</h2>\n<ul>\n<li>It is about how to handle change</li>\n<li>Create something new with change instead of mutating the current version. This creates a history of the object which allows us to debug in the future</li>\n<li>Nothing can be mutated - unchangeable</li>\n<li>Create trust since every other path of the code can be confidence that the value is always the same</li>\n<li>Provide a solid contract compared to using memory pointers</li>\n<li>Change is reflected in the new value</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//create new object with change</span>\n<span class=\"token keyword\">let</span> modelX <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>make<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Tesla\"</span><span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">:</span> <span class=\"token string\">\"X\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> model3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>modelX<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">:</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Why we need immutability?</h2>\n<ul>\n<li>Create trust in object value</li>\n<li>A lot more predicatable since nothing is mutated</li>\n<li>Provides a history of object values which enables time travel debugging</li>\n</ul>","fields":{"tagSlugs":["/tags/functional-programming/","/tags/immutability/"],"slug":"/posts/immutability/"},"frontmatter":{"title":"Immutability","tags":["functional programming","immutability"],"date":"2018-02-04T16:51:00.000Z","description":"It is about how to handle change and not about avoiding change."}}},"pageContext":{"slug":"/posts/immutability/"}}