{"data":{"site":{"siteMetadata":{"title":"Blog by Viet Anh Tran","subtitle":"Passionate about building software.","copyright":"Â© All rights reserved.","author":{"name":"Viet Anh Tran","email":"tranvietanh1996@gmail.com","github":"vietanhtran16","linkedin":"https://www.linkedin.com/in/viet-anh-tran-ba15a3a4/"},"disqusShortname":"","url":"https://vietanhtran16.github.io"}},"markdownRemark":{"id":"100b15af-018d-5a07-b3a8-7a54e35b2648","html":"<h2>What is Typescript?</h2>\n<p>In short, Typescript is a superset of Javascript with type support. </p>\n<p>It is basically still the normal Javascript that is running everywhere on the internet but with the power to describe the shape of an object, a function or just a variable in your code.</p>\n<h2>Examples of Typescript</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// Arguments</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> \n    first <span class=\"token operator\">+</span> second<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// Object</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IUser</span> <span class=\"token punctuation\">{</span>\n    firstName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    lastName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> user<span class=\"token punctuation\">:</span> IUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    firstName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Lionel\"</span><span class=\"token punctuation\">;</span>\n    lastName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Messi\"</span><span class=\"token punctuation\">;</span>\n    age<span class=\"token punctuation\">:</span> <span class=\"token number\">33</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// Function Return Type</span>\n<span class=\"token keyword\">const</span> greeting <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=></span> \n    <span class=\"token template-string\"><span class=\"token string\">`Hello there </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span></code></pre></div>\n<h2>Advantages of Typescript</h2>\n<h3>Easier to understand/maintain</h3>\n<p>Types clearly express questions such as:</p>\n<ul>\n<li>What arguments does this function accept?</li>\n<li>What would I get back from this function?</li>\n<li>What is the shape of this object?</li>\n</ul>\n<p>Without the support from Typescript, to answer correctly all the questions above, you need to try method such as using <code class=\"language-text\">console.log</code>, read other places where this function is used or even check its implementation to figure out.</p>\n<p>In my opion, <strong>code written is Typescript is easier to understand/maintain since it expresses your intention</strong> in the code and helps other people (including your future self) which leads to maintainable code and fewer bugs.</p>\n<h3>Refactor is simple and easy</h3>\n<p>For example, we have this object below:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> profile <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Luis\"</span><span class=\"token punctuation\">,</span>\n    age<span class=\"token punctuation\">:</span> <span class=\"token number\">19</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In Javascript, if we want to change <code class=\"language-text\">name</code> to <code class=\"language-text\">fullName</code>, it is not so safe since it could be anywhere in the code and your best option to do it might be a search and replace which could easily replaces something else by mistake.</p>\n<p>This tedious work in Typescript is way simpler, it could help you rename it with ease and alert of any error even before you build the code.</p>\n<h3>Encourage type first approach</h3>\n<p>Define your interface/contract before going deep into the implementation as types would drive your program specification.</p>\n<p>If we go deep in implementation without clear type definition, the implementation might not be suitable for the actual type we are receiving.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// User</span>\n<span class=\"token keyword\">const</span> user<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> fullName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    fullName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Viet\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// our implementation</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getUserName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">getUserName</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Oops name does not exist in user</span></code></pre></div>\n<p>Also, defining type first is useful when having two teams agreeing on a contract so that when both team are done (given that they followed the agreed contract), there is a higher likelihood that their implementation would integrate a lot better compared to when not having an agreed contract beforehand.</p>\n<h3>Other benefits</h3>\n<ul>\n<li>Less bugs.</li>\n<li>Less boilerplate tests (since type check is done by Typescript).</li>\n<li>Save developers time from debugging, reading code, etc.</li>\n</ul>\n<h2>Does it have any cons?</h2>\n<h3>Extra transpiling step</h3>\n<p>Browser cannot interpret Typescript code directly so it needs to be transpiled to Javascript before running. However, this step is automated and quite fast so it is not a major con compared to the values it brings</p>\n<h3>Some third party libraries do not have type definition</h3>\n<p>When this happens, you normally have to write type definition yourself and include it in your project or even better, you could contribute back your type definitions to the community by open sourcing it (which is a good way to learn Typescript). I am sure that the project owner would happily accept and help you with refining your type definition.</p>","fields":{"tagSlugs":["/tags/typescript/","/tags/javascript/"],"slug":"/posts/why-typescript/"},"frontmatter":{"title":"Why Typescript over Javascript?","tags":["typescript","javascript"],"date":"2020-08-30T06:10:00.000Z","description":"Typescript vs Javascript"}}},"pageContext":{"slug":"/posts/why-typescript/"}}